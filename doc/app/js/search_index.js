var search_data = {"index":{"searchIndex":["applicationcontroller","barcode","barcodeserializer","bitmap","bitmapserializer","drawing","existencevalidator","label","labelfields","dummylabels","labelprinter","commands","adjustposition","adjustprintdensity","barcodedraw","barcodeformat","base","bitmapdraw","bitmapformat","clearimagebuffer","drawing","classmethods","feed","formatting","classmethods","issue","outputter","classmethods","setlabelsize","setprefix","classmethods","datainput","base","label","drawings","formats","list","printjob","base","ipp","lpd","tof","labelserializer","labeltemplate","labeltemplateserializer","labeltype","labeltypeserializer","printjobserializer","printer","printerserializer","subclasschecker","classmethods","v1","docscontroller","labeltemplatescontroller","labeltypescontroller","printjobscontroller","printerscontroller","actual_count()","add()","add()","add()","add()","adjust_position()","adjust_print_density()","append()","as_json()","as_json()","as_json()","build()","build()","command()","command()","commands()","control_codes()","control_codes()","control_codes()","control_codes()","control_codes()","control_codes()","control_codes()","control_codes()","control_codes()","create()","create()","create()","create()","current_resource()","drawings()","dummy_labels()","dup()","each()","execute()","execute()","execute()","field_names()","field_names()","find()","find()","find()","find_by()","find_by_field_name()","formatted()","formatted()","formatted()","formatted()","formatted()","formatted()","has_subclasses()","id()","index()","index()","index()","index()","label_fields()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","optional_attributes()","options()","padded_placeholder_id()","padded_placeholder_id()","padded_placeholder_id()","permitted_attributes()","permitted_attributes()","permitted_attributes()","printer_params()","respond_to_missing?()","sanitize_key()","select()","set_commands_list()","set_label_size()","set_prefix()","show()","show()","show()","standard_commands()","super_dup()","template_attributes()","template_attributes()","test_exception_notifier()","to_h()","to_h()","to_s()","to_s()","type()","update()","update()","valid?()","validate_each()","readme"],"longSearchIndex":["applicationcontroller","barcode","barcodeserializer","bitmap","bitmapserializer","drawing","existencevalidator","label","labelfields","labelfields::dummylabels","labelprinter","labelprinter::commands","labelprinter::commands::adjustposition","labelprinter::commands::adjustprintdensity","labelprinter::commands::barcodedraw","labelprinter::commands::barcodeformat","labelprinter::commands::base","labelprinter::commands::bitmapdraw","labelprinter::commands::bitmapformat","labelprinter::commands::clearimagebuffer","labelprinter::commands::drawing","labelprinter::commands::drawing::classmethods","labelprinter::commands::feed","labelprinter::commands::formatting","labelprinter::commands::formatting::classmethods","labelprinter::commands::issue","labelprinter::commands::outputter","labelprinter::commands::outputter::classmethods","labelprinter::commands::setlabelsize","labelprinter::commands::setprefix","labelprinter::commands::setprefix::classmethods","labelprinter::datainput","labelprinter::datainput::base","labelprinter::datainput::label","labelprinter::datainput::label::drawings","labelprinter::datainput::label::formats","labelprinter::datainput::list","labelprinter::printjob","labelprinter::printjob::base","labelprinter::printjob::ipp","labelprinter::printjob::lpd","labelprinter::printjob::tof","labelserializer","labeltemplate","labeltemplateserializer","labeltype","labeltypeserializer","printjobserializer","printer","printerserializer","subclasschecker","subclasschecker::classmethods","v1","v1::docscontroller","v1::labeltemplatescontroller","v1::labeltypescontroller","v1::printjobscontroller","v1::printerscontroller","labelfields::dummylabels#actual_count()","labelfields#add()","labelprinter::datainput::label::drawings#add()","labelprinter::datainput::label::formats#add()","labelprinter::datainput::list#add()","labelprinter::datainput::base#adjust_position()","labelprinter::datainput::base#adjust_print_density()","labelprinter::datainput::list#append()","labelprinter::datainput::base#as_json()","labelprinter::datainput::label#as_json()","labeltype#as_json()","labelprinter::datainput::build()","labelprinter::printjob::build()","labelprinter::commands::base::command()","labelprinter::commands::drawing::classmethods#command()","labelprinter::commands::outputter#commands()","labelprinter::commands::adjustposition#control_codes()","labelprinter::commands::adjustprintdensity#control_codes()","labelprinter::commands::barcodeformat#control_codes()","labelprinter::commands::base#control_codes()","labelprinter::commands::bitmapformat#control_codes()","labelprinter::commands::clearimagebuffer#control_codes()","labelprinter::commands::feed#control_codes()","labelprinter::commands::issue#control_codes()","labelprinter::commands::setlabelsize#control_codes()","v1::labeltemplatescontroller#create()","v1::labeltypescontroller#create()","v1::printjobscontroller#create()","v1::printerscontroller#create()","v1::printerscontroller#current_resource()","label#drawings()","labelfields#dummy_labels()","label#dup()","labelprinter::datainput::list#each()","labelprinter::printjob::base#execute()","labelprinter::printjob::lpd#execute()","labelprinter::printjob::tof#execute()","label#field_names()","labeltemplate#field_names()","labelfields#find()","labelfields::dummylabels#find()","labelprinter::datainput::list#find()","labelprinter::datainput::list#find_by()","drawing#find_by_field_name()","labelprinter::commands::adjustposition#formatted()","labelprinter::commands::adjustprintdensity#formatted()","labelprinter::commands::base#formatted()","labelprinter::commands::drawing#formatted()","labelprinter::commands::formatting#formatted()","labelprinter::commands::issue#formatted()","subclasschecker::classmethods#has_subclasses()","labelprinter::printjob::base#id()","v1::docscontroller#index()","v1::labeltemplatescontroller#index()","v1::labeltypescontroller#index()","v1::printerscontroller#index()","labeltemplate#label_fields()","labelprinter::commands::base#method_missing()","labelfields::new()","labelfields::dummylabels::new()","labelprinter::commands::adjustposition::new()","labelprinter::commands::adjustprintdensity::new()","labelprinter::commands::drawing::new()","labelprinter::commands::formatting::new()","labelprinter::commands::setlabelsize::new()","labelprinter::datainput::base::new()","labelprinter::datainput::label::new()","labelprinter::datainput::list::new()","labelprinter::printjob::base::new()","labelprinter::commands::formatting::classmethods#optional_attributes()","drawing#options()","barcode#padded_placeholder_id()","bitmap#padded_placeholder_id()","drawing#padded_placeholder_id()","drawing::permitted_attributes()","label::permitted_attributes()","labeltemplate::permitted_attributes()","v1::printerscontroller#printer_params()","labelprinter::commands::base#respond_to_missing?()","labelprinter::datainput::list#sanitize_key()","labelprinter::datainput::list#select()","labelprinter::commands::outputter::classmethods#set_commands_list()","labelprinter::datainput::base#set_label_size()","labelprinter::commands::setprefix::classmethods#set_prefix()","v1::labeltemplatescontroller#show()","v1::labeltypescontroller#show()","v1::printerscontroller#show()","labelprinter::commands::outputter#standard_commands()","labeltemplate#super_dup()","drawing#template_attributes()","labeltype#template_attributes()","applicationcontroller#test_exception_notifier()","labelfields#to_h()","labelfields::dummylabels#to_h()","labelprinter::commands::base#to_s()","labelprinter::commands::outputter#to_s()","labelprinter::printjob::base#type()","v1::labeltemplatescontroller#update()","v1::labeltypescontroller#update()","labelprinter::datainput::base#valid?()","existencevalidator#validate_each()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["Barcode","","Barcode.html","","<p>Example:\n\n<pre>Barcode.create(field_name: &quot;barcode&quot;, x_origin: &quot;0300&quot;, y_origin: &quot;0000&quot;, barcode_type: &quot;9&quot;, ...</pre>\n"],["BarcodeSerializer","","BarcodeSerializer.html","",""],["Bitmap","","Bitmap.html","","<p>Example:\n\n<pre>Bitmap.create(field_name: &quot;header_text1&quot;, x_origin: &quot;0020&quot;, y_origin: &quot;0035&quot;, horizontal_magnification: ...</pre>\n"],["BitmapSerializer","","BitmapSerializer.html","",""],["Drawing","","Drawing.html","","<p>A drawing is something which can be output to a printer, either a barcode\nor a bitmap (some text) Each …\n"],["ExistenceValidator","","ExistenceValidator.html","","<p>Check whether the association for a belongs to exists. looks for either an\nobject or id.\n"],["Label","","Label.html","",""],["LabelFields","","LabelFields.html","","<p>For a label template will produce a list of field names for each label. For\nexample a label template …\n"],["LabelFields::DummyLabels","","LabelFields/DummyLabels.html","","<p>Simulate a valid json object Creates a header, footer and body which will\nbe an array of labels\n"],["LabelPrinter","","LabelPrinter.html","",""],["LabelPrinter::Commands","","LabelPrinter/Commands.html","","<p>Manages the production of label printer interface commands which make up a\nprint job. Each command is …\n"],["LabelPrinter::Commands::AdjustPosition","","LabelPrinter/Commands/AdjustPosition.html","","<p>Position fine adjust command (AX)\n"],["LabelPrinter::Commands::AdjustPrintDensity","","LabelPrinter/Commands/AdjustPrintDensity.html","","<p>Print density fine adjust command (AY)\n"],["LabelPrinter::Commands::BarcodeDraw","","LabelPrinter/Commands/BarcodeDraw.html","","<p>Bar code data command (RB)\n"],["LabelPrinter::Commands::BarcodeFormat","","LabelPrinter/Commands/BarcodeFormat.html","","<p>Bar code format command (XB)\n"],["LabelPrinter::Commands::Base","","LabelPrinter/Commands/Base.html","","<p>A command is something which when sent to the printer will perform a\ncertain action e.g. Feed command …\n"],["LabelPrinter::Commands::BitmapDraw","","LabelPrinter/Commands/BitmapDraw.html","","<p>Bit map font data command (RC)\n"],["LabelPrinter::Commands::BitmapFormat","","LabelPrinter/Commands/BitmapFormat.html","","<p>Bit map font format command (PC)\n"],["LabelPrinter::Commands::ClearImageBuffer","","LabelPrinter/Commands/ClearImageBuffer.html","","<p>Image buffer clear command (C)\n"],["LabelPrinter::Commands::Drawing","","LabelPrinter/Commands/Drawing.html","","<p>A drawing command is linked to a format command by the id. The only other\nattribute is the value which …\n"],["LabelPrinter::Commands::Drawing::ClassMethods","","LabelPrinter/Commands/Drawing/ClassMethods.html","","<p>Create a new drawing command and create the output.\n"],["LabelPrinter::Commands::Feed","","LabelPrinter/Commands/Feed.html","","<p>Feed command (T)\n"],["LabelPrinter::Commands::Formatting","","LabelPrinter/Commands/Formatting.html","","<p>A formatting command is one which describes the format of something that\nwill be  drawn on the label …\n"],["LabelPrinter::Commands::Formatting::ClassMethods","","LabelPrinter/Commands/Formatting/ClassMethods.html","",""],["LabelPrinter::Commands::Issue","","LabelPrinter/Commands/Issue.html","","<p>Issue command (XS)\n"],["LabelPrinter::Commands::Outputter","","LabelPrinter/Commands/Outputter.html","","<p>Allows the receiver to specify a list of commands which can then be formed\ninto valid printer output. …\n"],["LabelPrinter::Commands::Outputter::ClassMethods","","LabelPrinter/Commands/Outputter/ClassMethods.html","",""],["LabelPrinter::Commands::SetLabelSize","","LabelPrinter/Commands/SetLabelSize.html","","<p>Label size set command (D)\n"],["LabelPrinter::Commands::SetPrefix","","LabelPrinter/Commands/SetPrefix.html","","<p>Each command has a unique prefix. This module will create a couple of\nhelper methods.\n"],["LabelPrinter::Commands::SetPrefix::ClassMethods","","LabelPrinter/Commands/SetPrefix/ClassMethods.html","",""],["LabelPrinter::DataInput","","LabelPrinter/DataInput.html","","<p>Manages the production of the text for the input for the printer. Turns the\ninput values into a format …\n"],["LabelPrinter::DataInput::Base","","LabelPrinter/DataInput/Base.html","","<p>A data input will create a list of commands which can be output as text for\na single print job. Implements …\n"],["LabelPrinter::DataInput::Label","","LabelPrinter/DataInput/Label.html","","<p>A DataInput::Label is related to an ActiveRecord Label It also implements\nthe Commands::Outputter Each …\n"],["LabelPrinter::DataInput::Label::Drawings","","LabelPrinter/DataInput/Label/Drawings.html","","<p>A list of Barcode and Bitmap drawings.\n"],["LabelPrinter::DataInput::Label::Formats","","LabelPrinter/DataInput/Label/Formats.html","","<p>A list of Barcode and Bitmap formats.\n"],["LabelPrinter::DataInput::List","","LabelPrinter/DataInput/List.html","","<p>A special type of list. To make the labels easy to find they are added to a\nhash. Label names are duplicated …\n"],["LabelPrinter::PrintJob","","LabelPrinter/PrintJob.html","","<p>A print job will take data input, format it correctly and send it to the\nlabel printer. How it sends …\n"],["LabelPrinter::PrintJob::Base","","LabelPrinter/PrintJob/Base.html","","<p>A print job is an ActiveModel object For a print job to be execute it needs\nto be valid. For a print …\n"],["LabelPrinter::PrintJob::IPP","","LabelPrinter/PrintJob/IPP.html","","<p>A print job of type IPP (Internet Printing Protocol)\n"],["LabelPrinter::PrintJob::LPD","","LabelPrinter/PrintJob/LPD.html","","<p>A print job of type LPD (Line Printer Daemon)\n"],["LabelPrinter::PrintJob::TOF","","LabelPrinter/PrintJob/TOF.html","","<p>Not actually a print job as it is sent to a text file. This is purely for\ndebugging purposes. For example …\n"],["LabelSerializer","","LabelSerializer.html","",""],["LabelTemplate","","LabelTemplate.html","",""],["LabelTemplateSerializer","","LabelTemplateSerializer.html","",""],["LabelType","","LabelType.html","","<p>Example:  LabelType.create(name: “Plate”, feed_value: “004”,\nfine_adjustment: “08”, …\n"],["LabelTypeSerializer","","LabelTypeSerializer.html","",""],["PrintJobSerializer","","PrintJobSerializer.html","",""],["Printer","","Printer.html","","<p>A networked printer. The name will correspond to it&#39;s network name.\nEach printer is identified by …\n"],["PrinterSerializer","","PrinterSerializer.html","",""],["SubclassChecker","","SubclassChecker.html","",""],["SubclassChecker::ClassMethods","","SubclassChecker/ClassMethods.html","",""],["V1","","V1.html","",""],["V1::DocsController","","V1/DocsController.html","",""],["V1::LabelTemplatesController","","V1/LabelTemplatesController.html","",""],["V1::LabelTypesController","","V1/LabelTypesController.html","",""],["V1::PrintJobsController","","V1/PrintJobsController.html","",""],["V1::PrintersController","","V1/PrintersController.html","",""],["actual_count","LabelFields::DummyLabels","LabelFields/DummyLabels.html#method-i-actual_count","()","<p>The actual count includes the doubling of labels that are not header or\nfooter\n"],["add","LabelFields","LabelFields.html#method-i-add","(label)","<p>Add a label with a key which is the name of the label value is the list of\nfield names for that label …\n"],["add","LabelPrinter::DataInput::Label::Drawings","LabelPrinter/DataInput/Label/Drawings.html#method-i-add","(item, value)",""],["add","LabelPrinter::DataInput::Label::Formats","LabelPrinter/DataInput/Label/Formats.html#method-i-add","(item)",""],["add","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-add","(key, item)","<p>This will find any items matching the same key and increment the count by\n1. e.g. list.add(“my_key”, …\n"],["adjust_position","LabelPrinter::DataInput::Base","LabelPrinter/DataInput/Base.html#method-i-adjust_position","()","<p>Create an AdjustPosition command\n"],["adjust_print_density","LabelPrinter::DataInput::Base","LabelPrinter/DataInput/Base.html#method-i-adjust_print_density","()","<p>Create an AdjustPrintDensity command\n"],["append","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-append","(list)","<p>Append one list to another. It may be the case that the other list will\nhave duplicate keys. Therefore …\n"],["as_json","LabelPrinter::DataInput::Base","LabelPrinter/DataInput/Base.html#method-i-as_json","(options = {})","<p>return the values as is\n"],["as_json","LabelPrinter::DataInput::Label","LabelPrinter/DataInput/Label.html#method-i-as_json","(options = {})","<p>Just return the passed in values. No nonsens with rejigging the whole\nthing.\n"],["as_json","LabelType","LabelType.html#method-i-as_json","(options = {})","<p>Everything except the datetime stamps.\n"],["build","LabelPrinter::DataInput","LabelPrinter/DataInput.html#method-c-build","(label_template, input_values)","<p>Produces a new data input object from input values and a label template\n"],["build","LabelPrinter::PrintJob","LabelPrinter/PrintJob.html#method-c-build","(attributes)","<p>Build a new print job based on the protocol of the printer name that is\npassed. e.g. If the printer protocol …\n"],["command","LabelPrinter::Commands::Base","LabelPrinter/Commands/Base.html#method-c-command","(args = nil)","<p>Produces the output for a command without the necessity to initialize it.\n"],["command","LabelPrinter::Commands::Drawing::ClassMethods","LabelPrinter/Commands/Drawing/ClassMethods.html#method-i-command","(id, value)",""],["commands","LabelPrinter::Commands::Outputter","LabelPrinter/Commands/Outputter.html#method-i-commands","()","<p>Take a list of commands and execute them. Returns an array of objects. In\nthe case of standard commands …\n"],["control_codes","LabelPrinter::Commands::AdjustPosition","LabelPrinter/Commands/AdjustPosition.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::AdjustPrintDensity","LabelPrinter/Commands/AdjustPrintDensity.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::BarcodeFormat","LabelPrinter/Commands/BarcodeFormat.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::Base","LabelPrinter/Commands/Base.html#method-i-control_codes","()","<p>The control codes are the ordered set of instructions which make up a valid\ncommand without the prefix …\n"],["control_codes","LabelPrinter::Commands::BitmapFormat","LabelPrinter/Commands/BitmapFormat.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::ClearImageBuffer","LabelPrinter/Commands/ClearImageBuffer.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::Feed","LabelPrinter/Commands/Feed.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::Issue","LabelPrinter/Commands/Issue.html#method-i-control_codes","()",""],["control_codes","LabelPrinter::Commands::SetLabelSize","LabelPrinter/Commands/SetLabelSize.html#method-i-control_codes","()",""],["create","V1::LabelTemplatesController","V1/LabelTemplatesController.html#method-i-create","()",""],["create","V1::LabelTypesController","V1/LabelTypesController.html#method-i-create","()",""],["create","V1::PrintJobsController","V1/PrintJobsController.html#method-i-create","()",""],["create","V1::PrintersController","V1/PrintersController.html#method-i-create","()",""],["current_resource","V1::PrintersController","V1/PrintersController.html#method-i-current_resource","()",""],["drawings","Label","Label.html#method-i-drawings","()","<p>Each label can have a list of drawings which is all of the barcodes and\nbitmaps joined together.\n"],["dummy_labels","LabelFields","LabelFields.html#method-i-dummy_labels","()","<p>Produce a DummyLabels object which can be used for testing purposes.\nParticularly for internal tests …\n"],["dup","Label","Label.html#method-i-dup","()","<p>Labels can&#39;t be edited after creation so we need a way to be able to\nmodify existing labels Create …\n"],["each","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-each","(&block)","<p>We only need to loop through the values not the keys\n"],["execute","LabelPrinter::PrintJob::Base","LabelPrinter/PrintJob/Base.html#method-i-execute","()","<p>A base object should never send a job to a printer, because there won&#39;t\nbe one!\n"],["execute","LabelPrinter::PrintJob::LPD","LabelPrinter/PrintJob/LPD.html#method-i-execute","()","<p>Only execute the print job if it is valid. Create a temporary file of the\ndata output and send it to …\n"],["execute","LabelPrinter::PrintJob::TOF","LabelPrinter/PrintJob/TOF.html#method-i-execute","()",""],["field_names","Label","Label.html#method-i-field_names","()","<p>A list of the field names from each of the drawings\n"],["field_names","LabelTemplate","LabelTemplate.html#method-i-field_names","()","<p>Returns all of the field names as a hash.\n"],["find","LabelFields","LabelFields.html#method-i-find","(key)","<p>returns the field names for the label signified by key\n"],["find","LabelFields::DummyLabels","LabelFields/DummyLabels.html#method-i-find","(key)","<p>find value for key\n"],["find","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-find","(key)","<p>Firstly select all of the keys which match key If there are no matching\nkeys return nil. If there is …\n"],["find_by","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-find_by","(key)","<p>Return the first items which matches\n"],["find_by_field_name","Drawing","Drawing.html#method-i-find_by_field_name","(field_name)","<p>Find a drawing by its field name\n"],["formatted","LabelPrinter::Commands::AdjustPosition","LabelPrinter/Commands/AdjustPosition.html#method-i-formatted","()",""],["formatted","LabelPrinter::Commands::AdjustPrintDensity","LabelPrinter/Commands/AdjustPrintDensity.html#method-i-formatted","()",""],["formatted","LabelPrinter::Commands::Base","LabelPrinter/Commands/Base.html#method-i-formatted","(separator = '')","<p>A formatted command is one which has the prefix, separator and control\ncodes. e.g. PF;ABCDE12345\n"],["formatted","LabelPrinter::Commands::Drawing","LabelPrinter/Commands/Drawing.html#method-i-formatted","(separator = \";\")","<p>Example: PF001;ABCDE1234\n"],["formatted","LabelPrinter::Commands::Formatting","LabelPrinter/Commands/Formatting.html#method-i-formatted","(separator = \";\")","<p>Formats the output ready for a print job. This does not include escape\ncharacters. Example: PF001;ABCDE1234 …\n"],["formatted","LabelPrinter::Commands::Issue","LabelPrinter/Commands/Issue.html#method-i-formatted","()",""],["has_subclasses","SubclassChecker::ClassMethods","SubclassChecker/ClassMethods.html#method-i-has_subclasses","(*classes)",""],["id","LabelPrinter::PrintJob::Base","LabelPrinter/PrintJob/Base.html#method-i-id","()",""],["index","V1::DocsController","V1/DocsController.html#method-i-index","()",""],["index","V1::LabelTemplatesController","V1/LabelTemplatesController.html#method-i-index","()","<p>&#39;**&#39; includes all nested associated resources in the “included”\nmember\n"],["index","V1::LabelTypesController","V1/LabelTypesController.html#method-i-index","()",""],["index","V1::PrintersController","V1/PrintersController.html#method-i-index","()",""],["label_fields","LabelTemplate","LabelTemplate.html#method-i-label_fields","()","<p>A LabelFields object which will return all of the field names for the\nlabels. This includes nesting. …\n"],["method_missing","LabelPrinter::Commands::Base","LabelPrinter/Commands/Base.html#method-i-method_missing","(method_name, *arguments, &block)","<p>Each command has a prefix method e.g. XB? This method is useless unless all\nother commands can respond …\n"],["new","LabelFields","LabelFields.html#method-c-new","()",""],["new","LabelFields::DummyLabels","LabelFields/DummyLabels.html#method-c-new","(labels)","<p>Produces a hash for each key. e.g.\n\n<pre>dummy_labels = DummyLabels.new({label_1: [:field_1, :field_2], label_2: ...</pre>\n"],["new","LabelPrinter::Commands::AdjustPosition","LabelPrinter/Commands/AdjustPosition.html#method-c-new","(options = {})",""],["new","LabelPrinter::Commands::AdjustPrintDensity","LabelPrinter/Commands/AdjustPrintDensity.html#method-c-new","(options = {})",""],["new","LabelPrinter::Commands::Drawing","LabelPrinter/Commands/Drawing.html#method-c-new","(id, value)","<p>Set the id and value\n"],["new","LabelPrinter::Commands::Formatting","LabelPrinter/Commands/Formatting.html#method-c-new","(options = {})","<p>Sets all of the required and the optional attributes.\n"],["new","LabelPrinter::Commands::SetLabelSize","LabelPrinter/Commands/SetLabelSize.html#method-c-new","(options = {})",""],["new","LabelPrinter::DataInput::Base","LabelPrinter/DataInput/Base.html#method-c-new","(label_template, input_values)","<p>The labels are created from the input values and turned into a list each\nlabel will have a name. A value …\n"],["new","LabelPrinter::DataInput::Label","LabelPrinter/DataInput/Label.html#method-c-new","(label, values)","<p>Create a list of formats and drawings Find each value in the Label table\nand add it the formats and drawings. …\n"],["new","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-c-new","()",""],["new","LabelPrinter::PrintJob::Base","LabelPrinter/PrintJob/Base.html#method-c-new","(attributes = {})",""],["optional_attributes","LabelPrinter::Commands::Formatting::ClassMethods","LabelPrinter/Commands/Formatting/ClassMethods.html#method-i-optional_attributes","(options)","<p>Apart from the required attributes each format may have a number of\noptional attributes. These can be …\n"],["options","Drawing","Drawing.html#method-i-options","()","<p>options is a hash of the optional attributes for a drawing. This is a store\nfield so can change.\n"],["padded_placeholder_id","Barcode","Barcode.html#method-i-padded_placeholder_id","()","<p>e.g. 01\n"],["padded_placeholder_id","Bitmap","Bitmap.html#method-i-padded_placeholder_id","()","<p>e.g. 001\n"],["padded_placeholder_id","Drawing","Drawing.html#method-i-padded_placeholder_id","()","<p>e.g. 0001\n"],["permitted_attributes","Drawing","Drawing.html#method-c-permitted_attributes","()","<p>A list of all of the stored attributes along with required fields\n"],["permitted_attributes","Label","Label.html#method-c-permitted_attributes","()","<p>The permitted attributes are made up of the name, bitmap attributes and\nbarcode attributes.\n"],["permitted_attributes","LabelTemplate","LabelTemplate.html#method-c-permitted_attributes","()","<p>For use as permitted attributes in the controller\n"],["printer_params","V1::PrintersController","V1/PrintersController.html#method-i-printer_params","()",""],["respond_to_missing?","LabelPrinter::Commands::Base","LabelPrinter/Commands/Base.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["sanitize_key","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-sanitize_key","(key)","<p>remove the last part of the key. e.g. my_key_1 becomes my_key\n"],["select","LabelPrinter::DataInput::List","LabelPrinter/DataInput/List.html#method-i-select","(key)","<p>select all of the items which match the key. e.g. select(“my_key”) where\nmatching keys are …\n"],["set_commands_list","LabelPrinter::Commands::Outputter::ClassMethods","LabelPrinter/Commands/Outputter/ClassMethods.html#method-i-set_commands_list","(*list)","<p>Define your list of commands.\n"],["set_label_size","LabelPrinter::DataInput::Base","LabelPrinter/DataInput/Base.html#method-i-set_label_size","()","<p>Create a SetLabelSize command\n"],["set_prefix","LabelPrinter::Commands::SetPrefix::ClassMethods","LabelPrinter/Commands/SetPrefix/ClassMethods.html#method-i-set_prefix","(prefix)","<p>e.g. set_prefix “XY” will create two methods:  xy? which checks the type of\ncommand and prefix …\n"],["show","V1::LabelTemplatesController","V1/LabelTemplatesController.html#method-i-show","()",""],["show","V1::LabelTypesController","V1/LabelTypesController.html#method-i-show","()",""],["show","V1::PrintersController","V1/PrintersController.html#method-i-show","()",""],["standard_commands","LabelPrinter::Commands::Outputter","LabelPrinter/Commands/Outputter.html#method-i-standard_commands","()","<p>The standard commands which never change.\n"],["super_dup","LabelTemplate","LabelTemplate.html#method-i-super_dup","(new_name = nil)","<p>An implementation of dup which allows the name to be changed. Dup the\noriginal template. If a name is …\n"],["template_attributes","Drawing","Drawing.html#method-i-template_attributes","()","<p>Used to create commands when building a print job. All of the options along\nwith the placeholder_id and …\n"],["template_attributes","LabelType","LabelType.html#method-i-template_attributes","()","<p>When a print job is execute the data input is made of labels and standard\ncommands. This includes things …\n"],["test_exception_notifier","ApplicationController","ApplicationController.html#method-i-test_exception_notifier","()","<p>Ensure that the exception notifier is working. It will send an email to the\nstandard email address.\n"],["to_h","LabelFields","LabelFields.html#method-i-to_h","()","<p>turn the labels to a hash with indifferent access\n"],["to_h","LabelFields::DummyLabels","LabelFields/DummyLabels.html#method-i-to_h","()","<p>produces a hash from the open struct. for any label that is not a header or\nfooter will produce two copies …\n"],["to_s","LabelPrinter::Commands::Base","LabelPrinter/Commands/Base.html#method-i-to_s","()","<p>The output which is sent to the printer includes formatted command with\nescape characters. e.g. [ESC]PF;ABCDE12345 …\n"],["to_s","LabelPrinter::Commands::Outputter","LabelPrinter/Commands/Outputter.html#method-i-to_s","()","<p>Takes an array of commands produces the output and reduces it into a single\nstring.\n"],["type","LabelPrinter::PrintJob::Base","LabelPrinter/PrintJob/Base.html#method-i-type","()","<p>e.g. &lt;# LabelPrinter::PrintJob::LPD &gt;.type = LPD\n"],["update","V1::LabelTemplatesController","V1/LabelTemplatesController.html#method-i-update","()",""],["update","V1::LabelTypesController","V1/LabelTypesController.html#method-i-update","()",""],["valid?","LabelPrinter::DataInput::Base","LabelPrinter/DataInput/Base.html#method-i-valid-3F","()","<p>Only valid if there are some labels\n"],["validate_each","ExistenceValidator","ExistenceValidator.html#method-i-validate_each","(record, attribute, value)","<p>If the object is blank or the field with _id is blank add an error to the\nattribute\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}